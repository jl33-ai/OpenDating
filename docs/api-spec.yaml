openapi: 3.0.3
info:
  title: OpenDating
  description: |-
    <div class="header" style="float: left;">
      <img 
        width="140" 
        src="https://github.com/jl33-ai/OpenDating/blob/main/assets/logo-color.png?raw=true" 
        alt="OpenDating Logo"
      />
      <p>An open-source and collaborative dating app.</p>
    </div>
    
    <div class="badges">
      <a href="https://github.com/jl33-ai/OpenDating/stargazers">
        <img src="https://img.shields.io/github/stars/jl33-ai/OpenDating" alt="GitHub stars"/>
      </a>
      <a href="https://github.com/jl33-ai/OpenDating/issues">
        <img src="https://img.shields.io/github/issues/jl33-ai/OpenDating" alt="GitHub issues"/>
      </a>
      <a href="https://github.com/jl33-ai/OpenDating/blob/main/LICENSE">
        <img src="https://img.shields.io/github/license/jl33-ai/OpenDating" alt="License"/>
      </a>
      <a href="https://github.com/sponsors/ryo-ma">
        <img 
          src="https://github.com/jl33-ai/OpenDating" 
          alt="Sponsor"
        />
      </a>
    </div>
    
    <div class="content">
      <p>No b*llshit: see all of your data. The <a href="https://github.com/jl33-ai/OpenDating/blob/main/src/algorithm.ts">algorithm</a> powering the matchmaking is publicly available and community-driven.</p>
    
      <div class="getting-started">
        <h2>Getting Started</h2>
        <p>Make a GET request to <code>https://sg-server-5ime.onrender.com/api/auth/{phoneNumber}</code> to create an account.</p>
      </div>
    </div>

  # [App store](https://github.com/swagger-api/swagger-petstore)
  # [Original HN Post]()

  # contact:
  #   email: justin.supergame@gmail.com
  # license:
  #   name: MIT
  #   url: https://github.com/jl33-ai/OpenDating/blob/main/LICENSE
  version: 1.0.1
externalDocs:
  description: View and contribute to the matchmaking algorithm
  url: https://github.com/jl33-ai/OpenDating
servers:
  - url: https://sg-server-5ime.onrender.com/api
tags:
  - name: auth
    description: Create a new account or sign in
  - name: profile
    description: View or update your account
  - name: matching
    description: For swiping and matching with other profiles
paths:
  /profile:
    get:
      tags:
        - profile
      security:
        - bearerAuth: [ ]
      description: See your profile information
      responses:
        '200':
          description: 'Returns your profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          description: 'Not authorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - profile
      security:
        - bearerAuth: [ ]
      description: Update your profile information
      requestBody:
        $ref: '#/components/requestBodies/Profile'
      responses:
        '200':
          description: 'Returns updated profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'

            # /profile/status:
            #   get:
            #     tags:
            #       - profile
            #     security:
            #       - bearerAuth: []
            #     description: Returns the eligibility of your account.
            #     responses:
            #       '200':
            #         description: The eligibility of your account.
            #         content:
            #           application/json:
            #             schema:
            #               type: object
          #               properties:
          #                 is_valid: boolean
          #                 missing_fields:

    # /profile/stats:
    #   get:
    #     tags:
    #       - profile
    #     security:
    #       - bearerAuth: []
    #     description: Returns your statistics. No b*llshit - see exactly how many `RIGHT` and `LEFT` swipes your profile received. See when your account was created
    #     responses:

  /matches:
    get:
      tags:
        - matching
      security:
        - bearerAuth: [ ]
      description: >
        Returns a paginated list of profiles you've matched with.
      parameters:
        - name: limit
          in: query
          description: Number of matches to return per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of matches to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: 'Your recent matches'
          content:
            application/json:
              schema:
                type: object
                required:
                  - matches
                  - pagination
                properties:
                  matches:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProfileMatch'
                  pagination:
                    type: object
                    required:
                      - total
                      - limit
                      - offset
                    properties:
                      total:
                        type: integer
                        description: Total number of matches available
                        example: 42
                      limit:
                        type: integer
                        description: Number of matches per page
                        example: 10
                      offset:
                        type: integer
                        description: Current offset
                        example: 0
                      next_offset:
                        type: integer
                        nullable: true
                        description: Offset for the next page (null if no more matches)
                        example: 20

  /suggestions:
    get:
      tags:
        - matching
      security:
        - bearerAuth: [ ]
      description: Get a list of potential matches. View the matchmaking algorithm [here](https://github.com/jl33-ai/OpenDating/blob/main/src/algorithm.ts).
      responses:
        '200':
          description: 'List of suggested profiles'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Here are your suggestions. Hint: submit preferences at POST /matches, using the provided id.'
                  suggestions:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProfileSuggestion'

  /suggestions/{id}/{direction}:
    post:
      tags:
        - matching
      summary: Submit a swipe decision
      description: >
        Submit a _**swipe**_ on a profile. A right swipe indicates interest, while
        a left swipe indicates disinterest.
        <br>
        Note: This action cannot be undone.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: 'Match ID from the `/suggestions` feed'
          required: true
          schema:
            type: string
            format: uuid
        - name: direction
          description: 'Right if you like them, left otherwise'
          in: path
          required: true
          schema:
            type: string
            enum: [ left, right ]
      responses:
        '200':
          description: 'Swipe recorded successfully'
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - match_status
                properties:
                  success:
                    type: boolean
                    description: Whether the swipe was recorded successfully
                    example: true
                  match_status:
                    type: string
                    enum: [ none, pending, matched ]
                    description: >
                      Current match status:
                      * none - No match possible (left swipe or they already left swiped you)
                      * pending - Right swipe recorded, waiting for their decision
                      * matched - Mutual match formed
                    example: pending
                  match:
                    type: object
                    description: Present only when match_status is "matched"
                    required:
                      - id
                      - profile
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: Unique identifier for this match
                      created_at:
                        type: string
                        format: date-time
                        description: When the match was formed
                      profile:
                        $ref: '#/components/schemas/ProfileMatch'
                # '400':
                #   description: Invalid request
                #   content:
                #     application/json:
                #       schema:
                #         $ref: '#/components/schemas/Error'

  /auth/{phone_number}:
    get:
      tags:
        - auth
      description: Get a verification code sent to your phone number. Phone number should be in standard string format with country code included.
      parameters:
        - name: phone_number
          in: path
          required: true
          schema:
            type: string
            pattern: '^\+[1-9]\d{1,14}$'
            description: E.164 formatted phone number
      responses:
        '200':
          description: 'Status update'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Verification code sent. Hint: Get your verification code and submit it to /auth/{phone_number}/{code}'
        '400':
          description: 'Invalid phone number format'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/{phone_number}/{code}:
    get:
      tags:
        - auth
      description: Submit verification code and get your token
      parameters:
        - name: phone_number
          in: path
          required: true
          schema:
            type: string
            pattern: '^\+[1-9]\d{1,14}$'
        - name: code
          in: path
          required: true
          schema:
            type: string
            pattern: '^\d{6}$'
      responses:
        '200':
          description: 'Successful verification'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Verification successful. Hint: Put your new token in the Headers of subsequent requests. Try GET /suggestions next.'
                  token:
                    type: string
                    example: 'SECRET_TOKEN'
                    description: JWT token for authentication

components:
  properties:
    firstName:
      type: string
      example: 'Linus'
      maxLength: 100
    phoneNumber:
      type: string
      pattern: '^\+[1-9]\d{1,14}$'
      description: 'E.164 formatted phone number'
      example: '+12125551234'
    photos:
      type: array
      items:
        type: string
        format: uri
      maxItems: 6
      description: 'Array of image URLs'
      example: [
        'https://example.com/photos/1.jpg',
        'https://example.com/photos/2.jpg'
      ]
    bio:
      type: string
      maxLength: 280
      example: 'software engineer by day, baller by night. also love bouldering and videography.'
    dateOfBirth:
      type: string
      format: date
      example: '2000-01-01'
    distance:
      type: number
      format: float
      minimum: 0
      description: 'Distance in kilometers from user'
      example: 3.2
    age:
      type: integer
      minimum: 18
      maximum: 100
      example: 25
      description: 'Calculated age based on date_of_birth'
    createdAt:
      type: string
      format: date-time
      readOnly: true
    expiresAt:
      type: string
      format: date-time
      nullable: true
      description: 'Profile expiration date. Null indicates no expiry'
      example: '2029-11-03T00:00:00Z'
    location:
      type: array
      description: "Coordinates [longitude, latitude]"
      items:
        type: number
        format: float
      minItems: 2
      maxItems: 2
      example: [ -73.935242, 40.730610 ]

  schemas:
    Profile:
      type: object
      description: 'Your profile. Keep this information private.'
      required:
        - first_name
        - photos
        - bio
        - phone_number
        - date_of_birth
        - location
      properties:
        first_name:
          $ref: '#/components/properties/firstName'
        bio:
          $ref: '#/components/properties/bio'
        phone_number:
          $ref: '#/components/properties/phoneNumber'
        photos:
          $ref: '#/components/properties/photos'
        date_of_birth:
          $ref: '#/components/properties/dateOfBirth'
        location:
          $ref: '#/components/properties/location'
        created_at:
          $ref: '#/components/properties/createdAt'

    ProfileSuggestion:
      description: 'A suggested profile that you should swipe left/right on.'
      type: object
      required:
        - id
        - age
        - distance
      properties:
        id:
          type: string
          format: uuid
          description: 'Use this id to swipe left/right on this profile'
          readOnly: true
        first_name:
          $ref: '#/components/properties/firstName'
        photos:
          $ref: '#/components/properties/photos'
        bio:
          $ref: '#/components/properties/bio'
        age:
          $ref: '#/components/properties/age'
        distance:
          $ref: '#/components/properties/distance'

    ProfileMatch:
      description: 'A profile that you have matched with!'
      type: object
      required:
        - created_at
        - first_name
      properties:
        matched_at:
          description: 'When the match occurred'
          $ref: '#/components/properties/createdAt'
        first_name:
          $ref: '#/components/properties/firstName'
        phone_number:
          $ref: '#/components/properties/phoneNumber'
        photos:
          $ref: '#/components/properties/photos'
        secret_word:
          type: string
          description: A secret word shared between both users in the match that can be used to establish trust.
          example: 'reindeer'

    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
            description: A description of the error
            example: Something went wrong

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  requestBodies:
    Profile:
      description: Updated profile object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              first_name:
                $ref: '#/components/properties/firstName'
              bio:
                $ref: '#/components/properties/bio'
              phone_number:
                $ref: '#/components/properties/phoneNumber'
              photos:
                $ref: '#/components/properties/photos'
              date_of_birth:
                $ref: '#/components/properties/dateOfBirth'
              location:
                $ref: '#/components/properties/location'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT